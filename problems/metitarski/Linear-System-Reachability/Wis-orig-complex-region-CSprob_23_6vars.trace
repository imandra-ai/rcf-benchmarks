-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoC2C1,skoC1C1,skoXC1,skoYC1,skoTC1,skoC3C1}, ForAll[{}, And[skoYC1*skoYC1*(skoC1C1*skoC1C1*50+skoC2C1*skoC2C1*50)>skoXC1*skoXC1*(skoC1C1*skoC1C1*-50+skoC2C1*skoC2C1*-50),(1/10)>skoC1C1,1>skoC2C1,1>skoC3C1,10>skoTC1,skoC1C1>(-1/10),skoC2C1>(4/5),skoC3C1>(9/10),skoTC1>0]]], Reals]]

% In QepcadB format:
(E skoC2C1) (E skoC1C1) (E skoXC1) (E skoYC1) (E skoTC1) (E skoC3C1) [[(skoXC1 skoXC1 ((skoC1C1 skoC1C1 (-50))+(skoC2C1 skoC2C1 (-50))))<(skoYC1 skoYC1 ((skoC1C1 skoC1C1 (50))+(skoC2C1 skoC2C1 (50))))]/\[[skoC1C1<1/10]/\[[skoC2C1<1]/\[[skoC3C1<1]/\[[skoTC1<10]/\[[-1/10<skoC1C1]/\[[4/5<skoC2C1]/\[[9/10<skoC3C1]/\[0<skoTC1]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoC2C1 () Real) (declare-fun skoC1C1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (declare-fun skoTC1 () Real) (declare-fun skoC3C1 () Real) (assert (and (not (<= (* skoYC1 (* skoYC1 (+ (* skoC1C1 (* skoC1C1 50.)) (* skoC2C1 (* skoC2C1 50.))))) (* skoXC1 (* skoXC1 (+ (* skoC1C1 (* skoC1C1 (- 50.))) (* skoC2C1 (* skoC2C1 (- 50.)))))))) (and (not (<= (/ 1. 10.) skoC1C1)) (and (not (<= 1. skoC2C1)) (and (not (<= 1. skoC3C1)) (and (not (<= 10. skoTC1)) (and (not (<= skoC1C1 (/ (- 1.) 10.))) (and (not (<= skoC2C1 (/ 4. 5.))) (and (not (<= skoC3C1 (/ 9. 10.))) (not (<= skoTC1 0.)))))))))))
-----[end problem]-----

