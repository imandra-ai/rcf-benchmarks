-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoCC1,skoSC1,skoC3C1,skoC1C1,skoC2C1,skoTC1}, ForAll[{}, And[skoC3C1<=0,skoSC1*skoSC1==1+skoCC1*skoCC1*-1,skoTC1>0,skoC3C1>(9/10),skoC2C1>(4/5),skoC1C1>(-1/10),1>skoTC1,1>skoC3C1,1>skoC2C1,(1/10)>skoC1C1]]], Reals]]

% In QepcadB format:
(E skoCC1) (E skoSC1) (E skoC3C1) (E skoC1C1) (E skoC2C1) (E skoTC1) [[skoC3C1<=0]/\[[(skoSC1 skoSC1)=(1+(skoCC1 skoCC1 (-1)))]/\[[0<skoTC1]/\[[9/10<skoC3C1]/\[[4/5<skoC2C1]/\[[-1/10<skoC1C1]/\[[skoTC1<1]/\[[skoC3C1<1]/\[[skoC2C1<1]/\[skoC1C1<1/10]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoCC1 () Real) (declare-fun skoSC1 () Real) (declare-fun skoC3C1 () Real) (declare-fun skoC1C1 () Real) (declare-fun skoC2C1 () Real) (declare-fun skoTC1 () Real) (assert (and (<= skoC3C1 0.) (and (= (* skoSC1 skoSC1) (+ 1. (* skoCC1 (* skoCC1 (- 1.))))) (and (not (<= skoTC1 0.)) (and (not (<= skoC3C1 (/ 9. 10.))) (and (not (<= skoC2C1 (/ 4. 5.))) (and (not (<= skoC1C1 (/ (- 1.) 10.))) (and (not (<= 1. skoTC1)) (and (not (<= 1. skoC3C1)) (and (not (<= 1. skoC2C1)) (not (<= (/ 1. 10.) skoC1C1))))))))))))
-----[end problem]-----

