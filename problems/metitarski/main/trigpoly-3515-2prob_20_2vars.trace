-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoAC1}, ForAll[{}, And[skoAC1*(-3+skoAC1*-1)<=2,skoAC1*(3+skoAC1)<=-2,skoXC1*skoXC1*(2+skoAC1*(4+skoAC1*2)+skoXC1*skoXC1*((-2/3)+skoAC1*((-4/3)+skoAC1*(-2/3))+skoXC1*skoXC1*((4/45)+skoAC1*((8/45)+skoAC1*(4/45)))))>3+skoAC1*(5+skoAC1*2),skoAC1<=1,skoXC1>(-314159/100000),skoAC1>-1,(314159/100000)>skoXC1]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoAC1) [[(skoAC1 (-3+(skoAC1 (-1))))<=2]/\[[(skoAC1 (3+skoAC1))<=-2]/\[[(3+(skoAC1 (5+(skoAC1 (2)))))<(skoXC1 skoXC1 ((2+(skoAC1 (4+(skoAC1 (2)))))+(skoXC1 skoXC1 ((-2/3+(skoAC1 (-4/3+(skoAC1 (-2/3)))))+(skoXC1 skoXC1 (4/45+(skoAC1 (8/45+(skoAC1 (4/45))))))))))]/\[[skoAC1<=1]/\[[-314159/100000<skoXC1]/\[[-1<skoAC1]/\[skoXC1<314159/100000]]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoAC1 () Real) (assert (and (<= (* skoAC1 (+ (- 3.) (* skoAC1 (- 1.)))) 2.) (and (<= (* skoAC1 (+ 3. skoAC1)) (- 2.)) (and (not (<= (* skoXC1 (* skoXC1 (+ (+ 2. (* skoAC1 (+ 4. (* skoAC1 2.)))) (* skoXC1 (* skoXC1 (+ (+ (/ (- 2.) 3.) (* skoAC1 (+ (/ (- 4.) 3.) (* skoAC1 (/ (- 2.) 3.))))) (* skoXC1 (* skoXC1 (+ (/ 4. 45.) (* skoAC1 (+ (/ 8. 45.) (* skoAC1 (/ 4. 45.))))))))))))) (+ 3. (* skoAC1 (+ 5. (* skoAC1 2.)))))) (and (<= skoAC1 1.) (and (not (<= skoXC1 (/ (- 314159.) 100000.))) (and (not (<= skoAC1 (- 1.))) (not (<= (/ 314159. 100000.) skoXC1)))))))))
-----[end problem]-----

