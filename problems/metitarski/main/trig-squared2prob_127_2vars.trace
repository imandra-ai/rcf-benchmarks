-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoYC1}, ForAll[{}, And[0>skoYC1,skoXC1*(1+skoXC1*skoXC1*(-1/6))>0,Or[skoXC1*-1>skoYC1,skoYC1>skoXC1*-1],1>skoXC1,1>skoYC1,skoXC1>-1,skoYC1>-1,Or[0>skoYC1,skoYC1>0],Or[0>skoXC1,skoXC1>0]]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoYC1) [[skoYC1<0]/\[[0<(skoXC1 (1+(skoXC1 skoXC1 (-1/6))))]/\[[[skoYC1<(skoXC1 (-1))]\/[(skoXC1 (-1))<skoYC1]]/\[[skoXC1<1]/\[[skoYC1<1]/\[[-1<skoXC1]/\[[-1<skoYC1]/\[[[skoYC1<0]\/[0<skoYC1]]/\[[skoXC1<0]\/[0<skoXC1]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (assert (and (not (<= 0. skoYC1)) (and (not (<= (* skoXC1 (+ 1. (* skoXC1 (* skoXC1 (/ (- 1.) 6.))))) 0.)) (and (or (not (<= (* skoXC1 (- 1.)) skoYC1)) (not (<= skoYC1 (* skoXC1 (- 1.))))) (and (not (<= 1. skoXC1)) (and (not (<= 1. skoYC1)) (and (not (<= skoXC1 (- 1.))) (and (not (<= skoYC1 (- 1.))) (and (or (not (<= 0. skoYC1)) (not (<= skoYC1 0.))) (or (not (<= 0. skoXC1)) (not (<= skoXC1 0.))))))))))))
-----[end problem]-----

