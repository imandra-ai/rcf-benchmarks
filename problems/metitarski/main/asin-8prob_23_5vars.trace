-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoSMC1,skoSPC1,skoS2C1,skoXC1,pi}, ForAll[{}, And[skoSPC1<=-4+skoSMC1*-1,skoXC1==1+skoSMC1*skoSMC1*-1,-1+skoSPC1*skoSPC1==skoXC1,skoS2C1*skoS2C1==2,Pi>(15707963/5000000),(31415927/10000000)>Pi,0<=skoSPC1,0<=skoSMC1,0<=skoS2C1,skoXC1>0,1>skoXC1]]], Reals]]

% In QepcadB format:
(E skoSMC1) (E skoSPC1) (E skoS2C1) (E skoXC1) (E pi) [[skoSPC1<=(-4+(skoSMC1 (-1)))]/\[[skoXC1=(1+(skoSMC1 skoSMC1 (-1)))]/\[[(-1+(skoSPC1 skoSPC1))=skoXC1]/\[[(skoS2C1 skoS2C1)=2]/\[[15707963/5000000<pi]/\[[pi<31415927/10000000]/\[[0<=skoSPC1]/\[[0<=skoSMC1]/\[[0<=skoS2C1]/\[[0<skoXC1]/\[skoXC1<1]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoSMC1 () Real) (declare-fun skoSPC1 () Real) (declare-fun skoS2C1 () Real) (declare-fun skoXC1 () Real) (declare-fun metit_our_pi () Real) (assert (and (<= skoSPC1 (+ (- 4.) (* skoSMC1 (- 1.)))) (and (= skoXC1 (+ 1. (* skoSMC1 (* skoSMC1 (- 1.))))) (and (= (+ (- 1.) (* skoSPC1 skoSPC1)) skoXC1) (and (= (* skoS2C1 skoS2C1) 2.) (and (not (<= metit_our_pi (/ 15707963. 5000000.))) (and (not (<= (/ 31415927. 10000000.) metit_our_pi)) (and (<= 0. skoSPC1) (and (<= 0. skoSMC1) (and (<= 0. skoS2C1) (and (not (<= skoXC1 0.)) (not (<= 1. skoXC1)))))))))))))
-----[end problem]-----

