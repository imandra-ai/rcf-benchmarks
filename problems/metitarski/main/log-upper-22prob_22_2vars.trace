-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoYC1}, ForAll[{}, And[skoXC1*(-6+skoXC1*-3)>1,skoYC1*(2+skoXC1*(12+skoXC1*6))>(-4/3)+skoXC1*(9+skoXC1*(12+skoXC1*(1/3))),skoYC1*(-2+skoXC1*-4)>(1/2)+skoXC1*(-6+skoXC1*(-1/2)),(1/2)+skoXC1*(1/2)>skoYC1,skoXC1>0]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoYC1) [[1<(skoXC1 (-6+(skoXC1 (-3))))]/\[[(-4/3+(skoXC1 (9+(skoXC1 (12+(skoXC1 (1/3)))))))<(skoYC1 (2+(skoXC1 (12+(skoXC1 (6))))))]/\[[(1/2+(skoXC1 (-6+(skoXC1 (-1/2)))))<(skoYC1 (-2+(skoXC1 (-4))))]/\[[skoYC1<(1/2+(skoXC1 (1/2)))]/\[0<skoXC1]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (assert (and (not (<= (* skoXC1 (+ (- 6.) (* skoXC1 (- 3.)))) 1.)) (and (not (<= (* skoYC1 (+ 2. (* skoXC1 (+ 12. (* skoXC1 6.))))) (+ (/ (- 4.) 3.) (* skoXC1 (+ 9. (* skoXC1 (+ 12. (* skoXC1 (/ 1. 3.))))))))) (and (not (<= (* skoYC1 (+ (- 2.) (* skoXC1 (- 4.)))) (+ (/ 1. 2.) (* skoXC1 (+ (- 6.) (* skoXC1 (/ (- 1.) 2.))))))) (and (not (<= (+ (/ 1. 2.) (* skoXC1 (/ 1. 2.))) skoYC1)) (not (<= skoXC1 0.)))))))
-----[end problem]-----

