-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoS3C1}, ForAll[{}, And[skoXC1*(skoS3C1*skoS3C1*(3+skoS3C1*skoS3C1*-1)+skoXC1*skoXC1*skoXC1*skoXC1*((-1/24)+skoS3C1*skoS3C1*(1/40)+skoXC1*skoXC1*(skoS3C1*skoS3C1*(-1/1680)+skoXC1*skoXC1*(skoS3C1*skoS3C1*(1/120960)+skoXC1*skoXC1*skoS3C1*skoS3C1*(-1/13305600)))))>0,skoXC1>0,skoS3C1>0]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoS3C1) [[0<(skoXC1 ((skoS3C1 skoS3C1 (3+(skoS3C1 skoS3C1 (-1))))+(skoXC1 skoXC1 skoXC1 skoXC1 ((-1/24+(skoS3C1 skoS3C1 (1/40)))+(skoXC1 skoXC1 ((skoS3C1 skoS3C1 (-1/1680))+(skoXC1 skoXC1 ((skoS3C1 skoS3C1 (1/120960))+(skoXC1 skoXC1 skoS3C1 skoS3C1 (-1/13305600))))))))))]/\[[0<skoXC1]/\[0<skoS3C1]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoS3C1 () Real) (assert (and (not (<= (* skoXC1 (+ (* skoS3C1 (* skoS3C1 (+ 3. (* skoS3C1 (* skoS3C1 (- 1.)))))) (* skoXC1 (* skoXC1 (* skoXC1 (* skoXC1 (+ (+ (/ (- 1.) 24.) (* skoS3C1 (* skoS3C1 (/ 1. 40.)))) (* skoXC1 (* skoXC1 (+ (* skoS3C1 (* skoS3C1 (/ (- 1.) 1680.))) (* skoXC1 (* skoXC1 (+ (* skoS3C1 (* skoS3C1 (/ 1. 120960.))) (* skoXC1 (* skoXC1 (* skoS3C1 (* skoS3C1 (/ (- 1.) 13305600.)))))))))))))))))) 0.)) (and (not (<= skoXC1 0.)) (not (<= skoS3C1 0.)))))
-----[end problem]-----

