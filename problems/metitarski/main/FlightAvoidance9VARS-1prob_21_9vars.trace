-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoD10C1,skoE10C1,skoE20C1,skoA10C1,skoA20C1,skoTC1,skoB10C1,skoB20C1,skoD20C1}, ForAll[{}, And[skoE20C1<=(1/10),skoE10C1>(1/10),skoD20C1>(1/10),skoD10C1>(1/10),skoB20C1>1,skoB10C1>10,10>skoTC1,(3/20)>skoE20C1,(3/20)>skoE10C1,(3/20)>skoD10C1,-1>skoA20C1,-9>skoA10C1]]], Reals]]

% In QepcadB format:
(E skoD10C1) (E skoE10C1) (E skoE20C1) (E skoA10C1) (E skoA20C1) (E skoTC1) (E skoB10C1) (E skoB20C1) (E skoD20C1) [[skoE20C1<=1/10]/\[[1/10<skoE10C1]/\[[1/10<skoD20C1]/\[[1/10<skoD10C1]/\[[1<skoB20C1]/\[[10<skoB10C1]/\[[skoTC1<10]/\[[skoE20C1<3/20]/\[[skoE10C1<3/20]/\[[skoD10C1<3/20]/\[[skoA20C1<-1]/\[skoA10C1<-9]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoD10C1 () Real) (declare-fun skoE10C1 () Real) (declare-fun skoE20C1 () Real) (declare-fun skoA10C1 () Real) (declare-fun skoA20C1 () Real) (declare-fun skoTC1 () Real) (declare-fun skoB10C1 () Real) (declare-fun skoB20C1 () Real) (declare-fun skoD20C1 () Real) (assert (and (<= skoE20C1 (/ 1. 10.)) (and (not (<= skoE10C1 (/ 1. 10.))) (and (not (<= skoD20C1 (/ 1. 10.))) (and (not (<= skoD10C1 (/ 1. 10.))) (and (not (<= skoB20C1 1.)) (and (not (<= skoB10C1 10.)) (and (not (<= 10. skoTC1)) (and (not (<= (/ 3. 20.) skoE20C1)) (and (not (<= (/ 3. 20.) skoE10C1)) (and (not (<= (/ 3. 20.) skoD10C1)) (and (not (<= (- 1.) skoA20C1)) (not (<= (- 9.) skoA10C1))))))))))))))
-----[end problem]-----

