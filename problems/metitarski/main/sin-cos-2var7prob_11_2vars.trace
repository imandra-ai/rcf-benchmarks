-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoYC1}, ForAll[{}, And[skoXC1<=skoYC1,skoYC1<=skoXC1*-1,skoYC1*skoYC1*(skoXC1*(1+skoXC1*skoXC1*(-1/6))+skoYC1*skoYC1*skoXC1*(-1/12))>(1/100)+skoXC1*(2+skoXC1*skoXC1*((-1/3)+skoXC1*skoXC1*(1/60))),2+skoXC1*-1>skoYC1,skoYC1>-1,skoXC1>-1]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoYC1) [[skoXC1<=skoYC1]/\[[skoYC1<=(skoXC1 (-1))]/\[[(1/100+(skoXC1 (2+(skoXC1 skoXC1 (-1/3+(skoXC1 skoXC1 (1/60)))))))<(skoYC1 skoYC1 ((skoXC1 (1+(skoXC1 skoXC1 (-1/6))))+(skoYC1 skoYC1 skoXC1 (-1/12))))]/\[[skoYC1<(2+(skoXC1 (-1)))]/\[[-1<skoYC1]/\[-1<skoXC1]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (assert (and (<= skoXC1 skoYC1) (and (<= skoYC1 (* skoXC1 (- 1.))) (and (not (<= (* skoYC1 (* skoYC1 (+ (* skoXC1 (+ 1. (* skoXC1 (* skoXC1 (/ (- 1.) 6.))))) (* skoYC1 (* skoYC1 (* skoXC1 (/ (- 1.) 12.))))))) (+ (/ 1. 100.) (* skoXC1 (+ 2. (* skoXC1 (* skoXC1 (+ (/ (- 1.) 3.) (* skoXC1 (* skoXC1 (/ 1. 60.))))))))))) (and (not (<= (+ 2. (* skoXC1 (- 1.))) skoYC1)) (and (not (<= skoYC1 (- 1.))) (not (<= skoXC1 (- 1.)))))))))
-----[end problem]-----

