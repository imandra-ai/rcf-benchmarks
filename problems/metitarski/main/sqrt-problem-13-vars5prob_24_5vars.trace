-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoSSC1,skoSPC1,skoSMC1,skoS2C1,skoXC1}, ForAll[{}, And[skoXC1*(-4+skoSMC1*-1+skoSPC1*-1)>skoSMC1*(1+skoS2C1*2)+skoSPC1*(-1+skoS2C1*-2)+skoSSC1*(skoSMC1*((1/2)+skoS2C1)+skoSPC1*((-1/2)+skoS2C1*-1)),skoSSC1>-2,skoXC1>0,(4/5)>skoXC1]]], Reals]]

% In QepcadB format:
(E skoSSC1) (E skoSPC1) (E skoSMC1) (E skoS2C1) (E skoXC1) [[(((skoSMC1 (1+(skoS2C1 (2))))+(skoSPC1 (-1+(skoS2C1 (-2)))))+(skoSSC1 ((skoSMC1 (1/2+skoS2C1))+(skoSPC1 (-1/2+(skoS2C1 (-1)))))))<(skoXC1 ((-4+(skoSMC1 (-1)))+(skoSPC1 (-1))))]/\[[-2<skoSSC1]/\[[0<skoXC1]/\[skoXC1<4/5]]]].

% In SMTLib2 format:
(declare-fun skoSSC1 () Real) (declare-fun skoSPC1 () Real) (declare-fun skoSMC1 () Real) (declare-fun skoS2C1 () Real) (declare-fun skoXC1 () Real) (assert (and (not (<= (* skoXC1 (+ (+ (- 4.) (* skoSMC1 (- 1.))) (* skoSPC1 (- 1.)))) (+ (+ (* skoSMC1 (+ 1. (* skoS2C1 2.))) (* skoSPC1 (+ (- 1.) (* skoS2C1 (- 2.))))) (* skoSSC1 (+ (* skoSMC1 (+ (/ 1. 2.) skoS2C1)) (* skoSPC1 (+ (/ (- 1.) 2.) (* skoS2C1 (- 1.))))))))) (and (not (<= skoSSC1 (- 2.))) (and (not (<= skoXC1 0.)) (not (<= (/ 4. 5.) skoXC1))))))
-----[end problem]-----

