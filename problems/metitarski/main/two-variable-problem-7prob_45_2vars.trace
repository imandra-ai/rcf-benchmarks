-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoYC1}, ForAll[{}, And[-1<=skoXC1,skoYC1*(4+skoXC1*2+skoYC1*((-3/2)+skoXC1))>(-1/2),Or[0>skoXC1,skoYC1*skoXC1*(12+skoXC1*(-6+skoXC1))>skoXC1*12],Or[-1>skoXC1,skoYC1*skoXC1>skoXC1],skoYC1*skoXC1>-1,skoYC1>0]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoYC1) [[-1<=skoXC1]/\[[-1/2<(skoYC1 ((4+(skoXC1 (2)))+(skoYC1 (-3/2+skoXC1))))]/\[[[skoXC1<0]\/[(skoXC1 (12))<(skoYC1 skoXC1 (12+(skoXC1 (-6+skoXC1))))]]/\[[[skoXC1<-1]\/[skoXC1<(skoYC1 skoXC1)]]/\[[-1<(skoYC1 skoXC1)]/\[0<skoYC1]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (assert (and (<= (- 1.) skoXC1) (and (not (<= (* skoYC1 (+ (+ 4. (* skoXC1 2.)) (* skoYC1 (+ (/ (- 3.) 2.) skoXC1)))) (/ (- 1.) 2.))) (and (or (not (<= 0. skoXC1)) (not (<= (* skoYC1 (* skoXC1 (+ 12. (* skoXC1 (+ (- 6.) skoXC1))))) (* skoXC1 12.)))) (and (or (not (<= (- 1.) skoXC1)) (not (<= (* skoYC1 skoXC1) skoXC1))) (and (not (<= (* skoYC1 skoXC1) (- 1.))) (not (<= skoYC1 0.))))))))
-----[end problem]-----

