-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoYC1}, ForAll[{}, And[skoYC1*(-1+skoXC1*skoXC1*((1/2)+skoXC1*skoXC1*(-1/24))+skoYC1*(skoXC1*((1/2)+skoXC1*skoXC1*(-1/12))+skoYC1*((1/6)+skoXC1*skoXC1*(-1/12)+skoYC1*(skoXC1*(-1/24)+skoYC1*(-1/120)))))>skoXC1*(1+skoXC1*skoXC1*((-1/6)+skoXC1*skoXC1*(1/120))),(29/10)>skoXC1,(29/10)>skoYC1,skoXC1>(1/10),skoYC1>(1/10)]]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoYC1) [[(skoXC1 (1+(skoXC1 skoXC1 (-1/6+(skoXC1 skoXC1 (1/120))))))<(skoYC1 ((-1+(skoXC1 skoXC1 (1/2+(skoXC1 skoXC1 (-1/24)))))+(skoYC1 ((skoXC1 (1/2+(skoXC1 skoXC1 (-1/12))))+(skoYC1 ((1/6+(skoXC1 skoXC1 (-1/12)))+(skoYC1 ((skoXC1 (-1/24))+(skoYC1 (-1/120))))))))))]/\[[skoXC1<29/10]/\[[skoYC1<29/10]/\[[1/10<skoXC1]/\[1/10<skoYC1]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoYC1 () Real) (assert (and (not (<= (* skoYC1 (+ (+ (- 1.) (* skoXC1 (* skoXC1 (+ (/ 1. 2.) (* skoXC1 (* skoXC1 (/ (- 1.) 24.))))))) (* skoYC1 (+ (* skoXC1 (+ (/ 1. 2.) (* skoXC1 (* skoXC1 (/ (- 1.) 12.))))) (* skoYC1 (+ (+ (/ 1. 6.) (* skoXC1 (* skoXC1 (/ (- 1.) 12.)))) (* skoYC1 (+ (* skoXC1 (/ (- 1.) 24.)) (* skoYC1 (/ (- 1.) 120.)))))))))) (* skoXC1 (+ 1. (* skoXC1 (* skoXC1 (+ (/ (- 1.) 6.) (* skoXC1 (* skoXC1 (/ 1. 120.)))))))))) (and (not (<= (/ 29. 10.) skoXC1)) (and (not (<= (/ 29. 10.) skoYC1)) (and (not (<= skoXC1 (/ 1. 10.))) (not (<= skoYC1 (/ 1. 10.))))))))
-----[end problem]-----

