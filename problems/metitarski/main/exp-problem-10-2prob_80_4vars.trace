-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoSP1C1,skoSC1,skoSM1C1,skoXC1}, ForAll[{}, And[skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*skoSP1C1*-1<=0,-1+skoSP1C1*skoSP1C1==skoXC1,1+skoSM1C1*skoSM1C1==skoXC1,skoSC1*skoSC1==skoXC1,skoXC1>1,skoSP1C1>0,skoSM1C1>0,skoSC1>0,5>skoXC1]]], Reals]]

% In QepcadB format:
(E skoSP1C1) (E skoSC1) (E skoSM1C1) (E skoXC1) [[(skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 skoSP1C1 (-1))<=0]/\[[(-1+(skoSP1C1 skoSP1C1))=skoXC1]/\[[(1+(skoSM1C1 skoSM1C1))=skoXC1]/\[[(skoSC1 skoSC1)=skoXC1]/\[[1<skoXC1]/\[[0<skoSP1C1]/\[[0<skoSM1C1]/\[[0<skoSC1]/\[skoXC1<5]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoSP1C1 () Real) (declare-fun skoSC1 () Real) (declare-fun skoSM1C1 () Real) (declare-fun skoXC1 () Real) (assert (and (<= (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (* skoSP1C1 (- 1.)))))))))))))))) 0.) (and (= (+ (- 1.) (* skoSP1C1 skoSP1C1)) skoXC1) (and (= (+ 1. (* skoSM1C1 skoSM1C1)) skoXC1) (and (= (* skoSC1 skoSC1) skoXC1) (and (not (<= skoXC1 1.)) (and (not (<= skoSP1C1 0.)) (and (not (<= skoSM1C1 0.)) (and (not (<= skoSC1 0.)) (not (<= 5. skoXC1)))))))))))
-----[end problem]-----

