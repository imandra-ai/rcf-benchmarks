-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,pi}, ForAll[{}, And[skoXC1*Pi*(1/2)>Pi*Pi*(1/4),skoXC1*(-10395+Pi*Pi*(10395/4)+skoXC1*(Pi*(-10395/2)+skoXC1*(4725+Pi*Pi*-315+skoXC1*(Pi*630+skoXC1*(-210+Pi*Pi*(21/4)+skoXC1*(Pi*(-21/2)+skoXC1))))))>0,skoXC1*(5+Pi*Pi*(-5/4)+skoXC1*(Pi*(5/2)+skoXC1*(-2+Pi*Pi*(1/12)+skoXC1*Pi*(-1/6))))>0,skoXC1*(1+Pi*Pi*(-1/4)+skoXC1*Pi*(1/2))>0,Pi>(15707963/5000000),(31415927/10000000)>Pi,Pi*(1/2)>skoXC1,skoXC1>0]]], Reals]]

% In QepcadB format:
(E skoXC1) (E pi) [[(pi pi (1/4))<(skoXC1 pi (1/2))]/\[[0<(skoXC1 ((-10395+(pi pi (10395/4)))+(skoXC1 ((pi (-10395/2))+(skoXC1 ((4725+(pi pi (-315)))+(skoXC1 ((pi (630))+(skoXC1 ((-210+(pi pi (21/4)))+(skoXC1 ((pi (-21/2))+skoXC1))))))))))))]/\[[0<(skoXC1 ((5+(pi pi (-5/4)))+(skoXC1 ((pi (5/2))+(skoXC1 ((-2+(pi pi (1/12)))+(skoXC1 pi (-1/6))))))))]/\[[0<(skoXC1 ((1+(pi pi (-1/4)))+(skoXC1 pi (1/2))))]/\[[15707963/5000000<pi]/\[[pi<31415927/10000000]/\[[skoXC1<(pi (1/2))]/\[0<skoXC1]]]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun metit_our_pi () Real) (assert (and (not (<= (* skoXC1 (* metit_our_pi (/ 1. 2.))) (* metit_our_pi (* metit_our_pi (/ 1. 4.))))) (and (not (<= (* skoXC1 (+ (+ (- 10395.) (* metit_our_pi (* metit_our_pi (/ 10395. 4.)))) (* skoXC1 (+ (* metit_our_pi (/ (- 10395.) 2.)) (* skoXC1 (+ (+ 4725. (* metit_our_pi (* metit_our_pi (- 315.)))) (* skoXC1 (+ (* metit_our_pi 630.) (* skoXC1 (+ (+ (- 210.) (* metit_our_pi (* metit_our_pi (/ 21. 4.)))) (* skoXC1 (+ (* metit_our_pi (/ (- 21.) 2.)) skoXC1)))))))))))) 0.)) (and (not (<= (* skoXC1 (+ (+ 5. (* metit_our_pi (* metit_our_pi (/ (- 5.) 4.)))) (* skoXC1 (+ (* metit_our_pi (/ 5. 2.)) (* skoXC1 (+ (+ (- 2.) (* metit_our_pi (* metit_our_pi (/ 1. 12.)))) (* skoXC1 (* metit_our_pi (/ (- 1.) 6.))))))))) 0.)) (and (not (<= (* skoXC1 (+ (+ 1. (* metit_our_pi (* metit_our_pi (/ (- 1.) 4.)))) (* skoXC1 (* metit_our_pi (/ 1. 2.))))) 0.)) (and (not (<= metit_our_pi (/ 15707963. 5000000.))) (and (not (<= (/ 31415927. 10000000.) metit_our_pi)) (and (not (<= (* metit_our_pi (/ 1. 2.)) skoXC1)) (not (<= skoXC1 0.))))))))))
-----[end problem]-----

